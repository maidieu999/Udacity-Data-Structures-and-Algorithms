## Problem 1

Solution Logic:
The function checks if the input number is negative. If it is negative, a ValueError is raised since the square root is not defined for negative numbers.
It handles special cases where the input number is 0 or 1 by returning the number itself. This is because the square root of 0 or 1 is the number itself.
Binary Search Approach: For numbers greater than 1, the function utilizes a binary search approach to find the floored square root


Solution Time Complexity - O(log n):
Inside the loop, there are constant-time operations such as arithmetic operations and comparisons
In each iteration of the while loop, the range of search is halved.
The time complexity of the binary search algorithm is O(log n), where n is the given number.
Therefore, the time complexity of the sqrt function is O(log n)

Solution Space Complexity - O(1)
Local variables: The local variables start, end contribute O(1) space complexity.

## Problem 2

Solution Logic:
This solution employs a binary search algorithm to find the index of a target number within a rotated sorted array. 
It checks which half of the array is sorted by comparing the start and middle elements. 
Depending on whether the target falls within the sorted half, it adjusts the search range accordingly, allowing for accurate identification of the target index.

Solution Time Complexity - O(log n):
Inside the loop, there are constant-time operations such as arithmetic operations and comparisons
In each iteration of the while loop, the range of search is halved.
The time complexity of the binary search algorithm is O(log n), where n is the given number.
Therefore, the time complexity of the sqrt function is O(log n)

Solution Space Complexity - O(1)
Variables: The variables length, start, and end contribute O(1) space complexity.
Loop Variable: The loop variable mid is calculated within the loop and updated in each iteration. However, it does not create new memory allocations but rather reuses the same memory location. Therefore, it also contributes O(1) space complexity.

## Problem 3

Solution Logic:
Using the merge sort algorithm to sort the input array in increasing order.
Then, it iterates through the sorted array to construct two numbers, ensuring that they are formed by alternating digits for maximum sum

Solution Time Complexity - O(n log n)
Merge Sort Time Complexity: The merge sort algorithm used here has a time complexity of O(n log n) in all cases (best, average, and worst-case scenarios). This is because it consistently divides the array into halves until each subarray contains only one element, and then merges these subarrays in a manner that takes linear time proportional to the size of the input.
Construction of Numbers: After sorting the array, constructing the two numbers involves a single traversal through the sorted array. This process takes linear time, O(n), where n is the number of elements in the input list.
the overall time complexity of the solution is dominated by the time complexity of merge sort, which is O(n log n) in the worst-case scenario.

Solutution Space Complexity:  O(log n)
merge_sort:  O(n log n) where n is the number of elements in the input array arr. This complexity arises due to the recursive calls that split the array and the temporary memory space required for each level of the recursion, including the merging of sorted subarrays.
merge: O(n) where n is the combined total number of elements in the left and right arrays. This complexity arises from the creation of the result array to store the merged elements and the additional space used for the merging process without any recursive calls or additional data structures.
rearrange_digits: O(n) where n is the length of the input list input_list. This complexity arises due to the merge_sort function's space requirements and the additional space used within the function for storing the sorted array sorted_arr, the integers num1 and num2, and intermediate values during the rearrangement process.

## Problem 4

Solution Logic:
This solution utilizes the Dutch National Flag algorithm to sort the array in a single traversal. It maintains three pointers: low, mid, and high, representing the positions for elements less than 0, elements equal to 1, and elements greater than 2, respectively. By iterating through the array and swapping elements based on their values, it partitions the array into three sections, effectively sorting it in linear time complexity.

Solution Time Complexity - O(n)
The algorithm iterates through the input list once.
Inside the loop, it performs constant-time operations such as comparisons and swaps.
Each element is processed exactly once, and the algorithm completes in a single traversal of the input list, regardless of its size.
Therefore, the time complexity is linear, O(n), making it efficient for sorting arrays of 0s, 1s, and 2s.

Solution Space Complexity - O(1)
Variables low, mid, and high: These variables are integer pointers used to track the positions of elements within the input list. They occupy constant space regardless of the size of the input list. Therefore, they contribute O(1) space complexity.

## Problem 5

Solution logic:
The provided Python code defines a Trie data structure consisting of TrieNode and Trie classes. 
TrieNode represents a single node in the Trie, containing children nodes and a flag indicating if it's the end of a word. 
Trie class represents the Trie itself, with functions for insertion, finding nodes based on prefixes, and collecting suffixes. 
The insert function adds a word to the Trie by traversing through each character and creating corresponding nodes as necessary. 
The find function locates the Trie node representing a given prefix by traversing through the Trie. 
The suffixes function recursively collects suffixes for all complete words below a given node, generating a list of suffixes for a given suffix string.

Solution Time Complexity:
TrieNode:
insert: depends on the number of unique characters in the input (or the number of child nodes created) => O(n) per word
suffixes: Considering the recursion and traversing all complete words with different suffixes, the worst-case time complexity for the suffixes method could be O(m * k). m is the number of nodes in the Trie and k as the number of characters in a complete word (complete word count)

Trie:
insert: the time complexity is dependent on the length of the word being inserted => O(n)
find: the time complexity is determined by the length of the prefix => O(m), where m is the length of the prefix being searched

Solution Space Complexity
TrieNode: 
__init__: isEndOfWord occupies constant space, O(1), for each node. 
insert: depends on the number of unique characters in the input (or the number of child nodes created) => O(n), where n is the number of characters in the input
The dominant factor in the space complexity of the TrieNode class is the space occupied by the children dictionary, which grows with the number of unique characters encountered in the input words. Therefore, the space complexity of the TrieNode class is O(m), where m is the number of unique characters.
suffixes: determined by the number of complete words and the average length of their suffixes. If the trie is balanced and contains m complete words with an average suffix length of k characters, the space complexity is approximately O(m * k), accounting for both the space used by the list of collected suffixes and the call stack during recursive calls.
Overall, the space complexity of the TrieNode class depends on the number of child nodes stored in each node, the number of complete words in the trie, and the length of their suffixes

Trie: The root attribute of the Trie class is an instance of the TrieNode class, representing the root node of the trie. It occupies constant space, O(1), regardless of the size of the trie.
__init_: a single instance variable (self.root) is initialized to store the root node of the trie. This variable occupies constant space => is O(1)
insert: creates new nodes in the trie for each character of the input word, resulting in a space complexity of O(n), where n is the length of the input word. 
find: traverses the trie from the root to find the node representing the given prefix, resulting in a space complexity of O(m), where m is the length of the input prefix being searched.
the overall space complexity of the Trie class, considering both the Trie nodes and the input words or prefixes, would be O(N), where N is the total number of characters in all words or prefixes processed by the Trie.

## Problem 6

Solution Logic:
This function iterates through the list once, updating the minimum and maximum values as it encounters smaller or larger elements, respectively

Solution Time Complexity - O(n):
By visiting each element only once, it achieves a time complexity of O(n), where n is the length of the input list.

Solution Space Complexity - O(1)
Local variables: The local variables min, max contribute O(1) space complexity.

## Problem 7

Solution Logic:
This solution implements a routing mechanism using a Trie data structure.
The RouteTrieNode class represents a single node in the Trie, containing children nodes and a handler for the end of a path.
The RouteTrie class stores routes and their associated handlers, with methods for insertion and finding handlers based on paths.
When inserting a path into the trie, each segment of the path is added as a node, with the final node holding the associated handler.
The Router class manages the routing process, utilizing a RouteTrie instance to handle route additions and lookups.
Overall, this solution efficiently maps paths to their corresponding handlers, providing a flexible and scalable routing system for web applications.

Solution Time Complexity:
RouteTrie:
insert: the time complexity is O(n), where n is the length of the path being inserted. This is because we traverse the trie by iterating through each part of the path.
find: the time complexity is also O(n), where n is the length of the path being searched. Again, this involves traversing the trie based on the characters in the path.
_split_path: used internally to split a path into its individual parts, has a time complexity of O(n), where n is the length of the path. This is because we perform string manipulation operations such as stripping and splitting.

Router:
add_handler: the time complexity of the add_handler operation is O(n) for inserting a handler for a path of length n.
lookup: In the worst-case scenario, where the path is not found in the Route Trie, the time complexity is O(m), where m is the length of the path being searched.

Solution Sapce Complexity - O(m)
RouteTrieNode: O(1) for the constant space to persist children and handler
RouteTrie: does not store additional data beyond the root node. The primary space usage comes from the root node and its children. The space complexity for storing paths and handlers in the trie depends on the total number of nodes created, which in turn depends on the number of unique path segments (parts) inserted into the trie.
If there are n unique path segments, each represented by a separate node in the trie, the space complexity for the RouteTrie class would be O(n).
Router: does not store additional data beyond the RouteTrie instance and the not_found_handler attribute.
The dominant factor in the space complexity of the this solution is the space occupied by the children dictionary in RouteTrieNode, which grows with the number of unique characters encountered in the input words. Therefore, the space complexity is O(n), where n is the number of unique characters.